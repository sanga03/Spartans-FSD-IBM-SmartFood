{"version":3,"file":"CreditCard.validator.js","sourceRoot":"","sources":["CreditCard.validator.ts"],"names":[],"mappings":";;AACA,iCAAmC;AAEnC;IAAA;IA6EA,CAAC;IA3EG;;;OAGG;IACI,sCAAkB,GAAzB,UAA0B,OAAoB;QAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAEV,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE5D,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CACb,CAAC;gBACG,MAAM,CAAC;oBACH,OAAO,EAAE,qBAAqB;iBACjC,CAAA;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;;OAKG;IACI,sCAAkB,GAAzB,UAA0B,OAAoB;QAE1C,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAEV,IAAI,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAC5C,IAAI,OAAO,GAAQ,KAAK,CAAC;YAEzB,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,CAC5B,CAAC;gBACG,IAAI,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAC;gBACrD,IAAI,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,EAAC,EAAE,CAAC,CAAC;gBAEpD,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1D,CAAC;YAED,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CACb,CAAC;gBACG,MAAM,CAAC;oBACH,OAAO,EAAE,uBAAuB;iBACnC,CAAA;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAED;;;;OAIG;IACI,mCAAe,GAAtB,UAAuB,OAAoB;QAEvC,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAEV,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAEzD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CACb,CAAC;gBACG,MAAM,CAAC;oBACH,OAAO,EAAE,qBAAqB;iBACjC,CAAA;YACL,CAAC;QACL,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEL,0BAAC;AAAD,CAAC,AA7ED,IA6EC;AA7EY,kDAAmB","sourcesContent":["import { FormControl } from '@angular/forms';\nimport * as Payment from 'payment';\n\nexport class CreditCardValidator {\n\n    /**\n     * Validates a cc number\n     * @param control\n     */\n    static validateCardNumber(control: FormControl) {\n\n        if (control) {\n\n            let isValid = Payment.fns.validateCardNumber(control.value);\n\n            if (!isValid)\n            {\n                return {\n                    \"error\": \"CREDIT_CARD_INVALID\"\n                }\n            }\n        }     \n\n        return null;   \n    }\n\n    /**\n     * Validates the expiry date.\n     * Breaks exp by \"/\" string and assumes that first array entry is month and second year\n     * Also removes any spaces \n     * @param control\n     */\n    static validateCardExpiry(control: FormControl) {\n\n        if (control) {\n\n            let controlValue = control.value.split(\"/\");\n            let isValid      = false;\n\n            if (controlValue.length > 1)\n            {\n                let month = controlValue[0].replace(/^\\s+|\\s+$/g,'');\n                let year = controlValue[1].replace(/^\\s+|\\s+$/g,'');\n\n                isValid = Payment.fns.validateCardExpiry(month, year);\n            }\n\n            if (!isValid)\n            {\n                return {\n                    \"error\": \"CREDIT_EXPIRY_INVALID\"\n                }\n            }\n        }     \n\n        return null; \n    }\n\n    /**\n     * Validates cards CVC\n     * Also removes any spaces \n     * @param control\n     */\n    static validateCardCvc(control: FormControl) {\n\n        if (control) {\n\n            let isValid = Payment.fns.validateCardCVC(control.value);\n\n            if (!isValid)\n            {\n                return {\n                    \"error\": \"CREDIT_CARD_INVALID\"\n                }\n            }\n        }     \n\n        return null;  \n    }\n\n}\n"]}